//! # D-Bus interface proxy for: `org.freedesktop.NetworkManager.Device.Wireless`
//!
//! This code was generated by `zbus-xmlgen` `5.1.0` from D-Bus introspection data.
//! Source: `Interface '/org/freedesktop/NetworkManager/Devices/2' from service 'org.freedesktop.NetworkManager' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use std::collections::HashMap;

use futures_util::StreamExt;
use zbus::{proxy, zvariant::OwnedObjectPath, Connection, Result};

use crate::access_point::AccessPoint;

#[derive(Debug)]
pub struct WifiDevice<'a> {
    proxy: WirelessProxy<'a>,
}

impl<'a> WifiDevice<'a> {
    pub async fn from_object_path(conn: &'a Connection, path: &'a OwnedObjectPath) -> Result<Self> {
        let proxy = WirelessProxy::new(conn, path).await?;

        Ok(Self { proxy })
    }

    pub async fn scan(&'a self) -> Result<Vec<AccessPoint<'a>>> {
        // Request a scan; this will send a PropertyChanged signal for the "LastScan" property once completed.
        self.proxy.request_scan(HashMap::new()).await?;
        let mut scan_changed_notif = self.proxy.receive_last_scan_changed().await;

        let mut last_scan_time: Option<i64> = None;

        // Wait for last_scan_time to change before proceeding
        while let Some(signal) = scan_changed_notif.next().await {
            let signal = signal.get().await?;
            if let Some(prev) = last_scan_time {
                if prev != signal {
                    break;
                }
            }
            last_scan_time = Some(signal);
        }

        // At this point, we can query the updated list of access points that were retrieved from this scan.
        let access_pts = self.proxy.get_access_points().await?;
        let mut ap_list = Vec::with_capacity(access_pts.len());

        for ap in access_pts.iter() {
            let access_point =
                AccessPoint::from_object_path(self.proxy.inner().connection(), ap.clone()).await?;
            ap_list.push(access_point);
        }

        Ok(ap_list)
    }
}

#[proxy(
    interface = "org.freedesktop.NetworkManager.Device.Wireless",
    default_service = "org.freedesktop.NetworkManager"
)]
pub trait Wireless {
    /// GetAccessPoints method
    fn get_access_points(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

    /// GetAllAccessPoints method
    fn get_all_access_points(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

    /// RequestScan method
    fn request_scan(
        &self,
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// AccessPointAdded signal
    #[zbus(signal)]
    fn access_point_added(&self, access_point: zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

    /// AccessPointRemoved signal
    #[zbus(signal)]
    fn access_point_removed(
        &self,
        access_point: zbus::zvariant::ObjectPath<'_>,
    ) -> zbus::Result<()>;

    /// AccessPoints property
    #[zbus(property)]
    fn access_points(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

    /// ActiveAccessPoint property
    #[zbus(property)]
    fn active_access_point(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// Bitrate property
    #[zbus(property)]
    fn bitrate(&self) -> zbus::Result<u32>;

    /// HwAddress property
    #[zbus(property)]
    fn hw_address(&self) -> zbus::Result<String>;

    /// LastScan property
    #[zbus(property)]
    fn last_scan(&self) -> zbus::Result<i64>;

    /// Mode property
    #[zbus(property)]
    fn mode(&self) -> zbus::Result<u32>;

    /// PermHwAddress property
    #[zbus(property)]
    fn perm_hw_address(&self) -> zbus::Result<String>;

    /// WirelessCapabilities property
    #[zbus(property)]
    fn wireless_capabilities(&self) -> zbus::Result<u32>;
}
